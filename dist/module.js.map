{"mappings":"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","sources":["<anon>","src/index.ts","src/ags3.ts","src/utils.ts","src/ags4.ts"],"sourcesContent":["/**\n * AGS importer\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */ /**\n * AGS3.x importer\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */ /**\n * Utils\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */ function $fc7df41ca676b6cd$export$20c071b7401cef3(value) {\n    return /\\d{4}-\\d{2}-\\d{2}/g.test(value);\n}\nfunction $fc7df41ca676b6cd$export$5d452d25893c9ae2(value) {\n    return /^[\\d.,]+$/g.test(value);\n}\nfunction $fc7df41ca676b6cd$export$26e0507334599a1e(value) {\n    return /[a-zA-Z\\/-]+/g.test(value);\n}\nfunction $fc7df41ca676b6cd$export$5e4751563059a4b6(value, decimal) {\n    const r = Math.pow(10, decimal ?? 1);\n    let v = value ?? 0;\n    if (isNaN(v) || !isFinite(v)) v = 0;\n    return Math.round(v * r) / r;\n}\nfunction $fc7df41ca676b6cd$export$837bd02682cd3db9(content) {\n    const blocks = [];\n    if (!content || typeof content !== \"string\") return blocks;\n    const groups = content.split(/(\\r\\n|\\n\\r|\\n){2,}/gm);\n    for(let i = 0; i < groups.length; i++){\n        const group = groups[i].trim();\n        if (!group.length) continue;\n        const rows = group.split(/\\n/gm).map((row)=>row.split(/\",/g).map((cell)=>cell.trim().replace(/^(\")|(\")$/g, \"\")));\n        blocks.push(rows);\n    }\n    return blocks;\n}\n\n\nfunction $e540d153a2cdc917$export$2e2bcd8739ae039(content) {\n    const groups = [];\n    const blocks = (0, $fc7df41ca676b6cd$export$837bd02682cd3db9)(content);\n    for(let i = 0; i < blocks.length; i++){\n        let heading = \"\";\n        const block = blocks[i];\n        const headers = [];\n        const data = [];\n        for(let j = 0; j < block.length; j++){\n            const row = block[j];\n            if (row.length < 1) continue;\n            const firstCell = row[0] ?? \"\";\n            if (firstCell.indexOf(\"**\") > -1) heading = firstCell.replace(/[?*]/g, \"\").trim();\n            else if (firstCell.charAt(0) === \"*\") for(let k = 0; k < row.length; k++){\n                const cell = row[k];\n                headers.push({\n                    name: cell.length ? cell.replace(/[?*]/g, \"\").trim() : \"undefined\",\n                    unit: \"\",\n                    type: \"\"\n                });\n            }\n            else if (firstCell === \"<UNITS>\") for(let k = 0; k < row.length; k++){\n                const cell = row[k];\n                if (k < headers.length) headers[k].unit = cell.length ? cell.trim() : \"\";\n            }\n            else {\n                const cont = firstCell === \"<CONT>\" && data.length > 0;\n                const cells = [];\n                for(let k = 0; k < row.length; k++){\n                    const cell = row[k];\n                    const value = cell && cell.length ? cell : \"\";\n                    const header = k < headers.length ? headers[k] : {\n                        name: \"undefined\"\n                    };\n                    const unit = header.unit ?? \"\";\n                    if (unit === \"dd/mm/yyyy\") {\n                        const parts = value.split(\"/\");\n                        cells.push(parts.length === 3 ? `${parts[2].trim()}-${parts[1].trim()}-${parts[0].trim()}` : null);\n                    } else if (unit === \"yyyy-mm-dd\") {\n                        const parts = value.split(\"-\");\n                        cells.push(parts.length === 3 ? `${parts[0].trim()}-${parts[1].trim()}-${parts[2].trim()}` : null);\n                    } else if (!value.length) cells.push(null);\n                    else if ((0, $fc7df41ca676b6cd$export$5d452d25893c9ae2)(value)) cells.push((0, $fc7df41ca676b6cd$export$5e4751563059a4b6)(parseFloat(value.trim()), 5));\n                    else cells.push(value);\n                }\n                if (cont) {\n                    const prev = data[data.length - 1];\n                    for(let k = 1; k < cells.length; k++){\n                        const cell = cells[k] ?? \"\";\n                        if (cell !== null) {\n                            if (k < prev.length) prev[k] = `${prev[k] ?? \"\"}${cell}`;\n                        }\n                    }\n                } else {\n                    if (headers.length < cells.length) while(headers.length < cells.length)headers.push({\n                        name: `${heading}_${headers.length}`,\n                        unit: \"\",\n                        type: \"\"\n                    });\n                    if (cells.length < headers.length) while(cells.length < headers.length)cells.push(null);\n                    data.push(cells);\n                }\n            }\n        }\n        if (heading.length) groups.push({\n            heading: heading,\n            columns: headers,\n            rows: data\n        });\n    }\n    return groups;\n}\n\n\n/**\n * AGS4.x importer\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */ \nfunction $7c8baf6910b5e6a3$export$2e2bcd8739ae039(content) {\n    const groups = [];\n    const blocks = (0, $fc7df41ca676b6cd$export$837bd02682cd3db9)(content);\n    for(let i = 0; i < blocks.length; i++){\n        let heading = \"\";\n        const block = blocks[i];\n        const headers = [];\n        const data = [];\n        for(let j = 0; j < block.length; j++){\n            const row = block[j];\n            if (row.length < 2) continue;\n            const firstCell = row[0] ?? \"\";\n            if (firstCell === \"GROUP\") heading = (row[1] ?? \"\").trim();\n            else if (firstCell === \"HEADING\") for(let k = 1; k < row.length; k++){\n                const cell = row[k];\n                headers.push({\n                    name: cell.length ? cell.trim() : \"undefined\",\n                    unit: \"\",\n                    type: \"\"\n                });\n            }\n            else if (firstCell === \"UNIT\") for(let k = 1; k < row.length; k++){\n                const cell = row[k];\n                if (k - 1 < headers.length) headers[k - 1].unit = cell.length ? cell.trim() : \"\";\n            }\n            else if (firstCell === \"TYPE\") for(let k = 1; k < row.length; k++){\n                const cell = row[k];\n                if (k - 1 < headers.length) headers[k - 1].type = cell.length ? cell.trim() : \"\";\n            }\n            else if (firstCell === \"DATA\") {\n                const cells = [];\n                for(let k = 1; k < row.length; k++){\n                    const cell = row[k];\n                    const value = cell.length ? cell.trim() : \"\";\n                    const header = k - 1 < headers.length ? headers[k - 1] : {\n                        name: \"undefined\"\n                    };\n                    const type = header.type ?? \"\";\n                    if (type === \"DT\") cells.push((0, $fc7df41ca676b6cd$export$20c071b7401cef3)(value) ? value : null);\n                    else if (type === \"DMS\") cells.push(value.length ? value : null);\n                    else if (type.indexOf(\"DP\") > -1 || type.indexOf(\"SP\") > 1) // const dp = Number.parseInt(type.replace(/\\D+/g, ''))\n                    cells.push(value.length ? (0, $fc7df41ca676b6cd$export$5e4751563059a4b6)(Number.parseFloat(value), 5) : null);\n                    else if (type === \"X\" || type === \"ID\") cells.push(value.length ? value : null);\n                    else if ((0, $fc7df41ca676b6cd$export$5d452d25893c9ae2)(value)) cells.push(value.length ? (0, $fc7df41ca676b6cd$export$5e4751563059a4b6)(Number.parseFloat(value), 5) : null);\n                    else cells.push(value.length ? value : null);\n                }\n                if (headers.length < cells.length) while(headers.length < cells.length)headers.push({\n                    name: `${heading}_${headers.length}`,\n                    unit: \"\",\n                    type: \"\"\n                });\n                if (cells.length < headers.length) while(cells.length < headers.length)cells.push(null);\n                data.push(cells);\n            }\n        }\n        if (heading.length) groups.push({\n            heading: heading,\n            columns: headers,\n            rows: data\n        });\n    }\n    return groups;\n}\n\n\nfunction $23ccb22ac3ecb2a2$export$c506eb22e615ba4a(content) {\n    return content.indexOf(\"**PROJ\") > -1 ? 3 : 4;\n}\nfunction $23ccb22ac3ecb2a2$export$98e6a39c04603d36(content) {\n    const version = content.indexOf(\"**PROJ\") > -1 ? 3 : 4;\n    return version === 3 ? (0, $e540d153a2cdc917$export$2e2bcd8739ae039)(content) : (0, $7c8baf6910b5e6a3$export$2e2bcd8739ae039)(content);\n}\nfunction $23ccb22ac3ecb2a2$export$71aa6c912b956294(heading, groups) {\n    if (!groups.length) return null;\n    const i = groups.findIndex((group)=>group.heading === heading);\n    return i > -1 ? groups[i] : null;\n}\nfunction $23ccb22ac3ecb2a2$export$871de8747c9eaa88(group, keys) {\n    return group.rows.map((row)=>{\n        const values = {};\n        keys.forEach((key)=>{\n            const i = group.columns.findIndex((column)=>column.name === key.header);\n            let value = i > -1 ? row[i] : null;\n            if (key.format === \"percent\") {\n                value = Number.parseFloat(value);\n                values[key.name] = Number.isFinite(value) ? value / 100 : null;\n            } else values[key.name] = value !== null ? value : key.default ?? null;\n        });\n        return values;\n    });\n}\n\n\nexport {$23ccb22ac3ecb2a2$export$c506eb22e615ba4a as getVersion, $23ccb22ac3ecb2a2$export$98e6a39c04603d36 as parse, $23ccb22ac3ecb2a2$export$71aa6c912b956294 as find, $23ccb22ac3ecb2a2$export$871de8747c9eaa88 as map};\n//# sourceMappingURL=module.js.map\n","/**\n * AGS importer\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */\n\nimport type { AGSGroup, AGSMap } from \"./types\";\nimport ags3 from \"./ags3\";\nimport ags4 from \"./ags4\";\n\nexport type { AGSGroup, AGSMap };\n\nexport function getVersion(content: string): number {\n  return content.indexOf(\"**PROJ\") > -1 ? 3 : 4;\n}\n\nexport function parse(content: string): AGSGroup[] {\n  const version = content.indexOf(\"**PROJ\") > -1 ? 3 : 4;\n  return version === 3 ? ags3(content) : ags4(content);\n}\n\nexport function find(heading: string, groups: AGSGroup[]): AGSGroup | null {\n  if (!groups.length) return null;\n  const i = groups.findIndex((group) => group.heading === heading);\n  return i > -1 ? groups[i] : null;\n}\n\nexport function map(group: AGSGroup, keys: AGSMap[]): { [key: string]: any }[] {\n  return group.rows.map((row) => {\n    const values: { [key: string]: any } = {};\n    keys.forEach((key) => {\n      const i = group.columns.findIndex((column) => column.name === key.header);\n      let value: any = i > -1 ? row[i] : null;\n      if (key.format === \"percent\") {\n        value = Number.parseFloat(value);\n        values[key.name] = Number.isFinite(value) ? value / 100 : null;\n      } else {\n        values[key.name] = value !== null ? value : key.default ?? null;\n      }\n    });\n    return values;\n  });\n}\n","/**\n * AGS3.x importer\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */\n\nimport type { AGSGroup, AGSColumn } from \"./types\";\nimport { block, testDigit, nround } from \"./utils\";\n\nexport default function (content?: string | null): AGSGroup[] {\n  const groups: AGSGroup[] = [];\n  const blocks = block(content);\n\n  for (let i = 0; i < blocks.length; i++) {\n    let heading = \"\";\n    const block = blocks[i];\n    const headers: AGSColumn[] = [];\n    const data: (string | number | null)[][] = [];\n    for (let j = 0; j < block.length; j++) {\n      const row = block[j];\n      if (row.length < 1) {\n        continue;\n      }\n\n      const firstCell = row[0] ?? \"\";\n      if (firstCell.indexOf(\"**\") > -1) {\n        heading = firstCell.replace(/[?*]/g, \"\").trim();\n      } else if (firstCell.charAt(0) === \"*\") {\n        for (let k = 0; k < row.length; k++) {\n          const cell = row[k];\n          headers.push({\n            name: cell.length ? cell.replace(/[?*]/g, \"\").trim() : \"undefined\",\n            unit: \"\",\n            type: \"\"\n          });\n        }\n      } else if (firstCell === \"<UNITS>\") {\n        for (let k = 0; k < row.length; k++) {\n          const cell = row[k];\n          if (k < headers.length) {\n            headers[k].unit = cell.length ? cell.trim() : \"\";\n          }\n        }\n      } else {\n        const cont = firstCell === \"<CONT>\" && data.length > 0;\n        const cells = [];\n        for (let k = 0; k < row.length; k++) {\n          const cell = row[k];\n          const value = cell && cell.length ? cell : \"\";\n          const header =\n            k < headers.length ? headers[k] : { name: \"undefined\" };\n          const unit = header.unit ?? \"\";\n          if (unit === \"dd/mm/yyyy\") {\n            const parts = value.split(\"/\");\n            cells.push(\n              parts.length === 3\n                ? `${parts[2].trim()}-${parts[1].trim()}-${parts[0].trim()}`\n                : null\n            );\n          } else if (unit === \"yyyy-mm-dd\") {\n            const parts = value.split(\"-\");\n            cells.push(\n              parts.length === 3\n                ? `${parts[0].trim()}-${parts[1].trim()}-${parts[2].trim()}`\n                : null\n            );\n          } else if (!value.length) {\n            cells.push(null);\n          } else if (testDigit(value)) {\n            cells.push(nround(parseFloat(value.trim()), 5));\n          } else {\n            cells.push(value);\n          }\n        }\n        if (cont) {\n          const prev = data[data.length - 1];\n          for (let k = 1; k < cells.length; k++) {\n            const cell = cells[k] ?? \"\";\n            if (cell !== null) {\n              if (k < prev.length) {\n                prev[k] = `${prev[k] ?? \"\"}${cell}`;\n              }\n            }\n          }\n        } else {\n          if (headers.length < cells.length) {\n            while (headers.length < cells.length) {\n              headers.push({\n                name: `${heading}_${headers.length}`,\n                unit: \"\",\n                type: \"\"\n              });\n            }\n          }\n          if (cells.length < headers.length) {\n            while (cells.length < headers.length) {\n              cells.push(null);\n            }\n          }\n          data.push(cells);\n        }\n      }\n    }\n\n    if (heading.length) {\n      groups.push({\n        heading: heading,\n        columns: headers,\n        rows: data\n      });\n    }\n  }\n\n  return groups;\n}\n","/**\n * Utils\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */\n\nexport function testIsoDate(value: string): boolean {\n  return /\\d{4}-\\d{2}-\\d{2}/g.test(value);\n}\n\nexport function testDigit(value: string): boolean {\n  return /^[\\d.,]+$/g.test(value);\n}\n\nexport function testNonDigit(value: string): boolean {\n  return /[a-zA-Z\\/-]+/g.test(value);\n}\n\nexport function nround(value: number | null, decimal: number | null): number {\n  const r = Math.pow(10, decimal ?? 1);\n  let v = value ?? 0;\n  if (isNaN(v) || !isFinite(v)) {\n    v = 0;\n  }\n  return Math.round(v * r) / r;\n}\n\nexport function block(content?: string | null): string[][][] {\n  const blocks: string[][][] = [];\n  if (!content || typeof content !== \"string\") return blocks;\n  const groups = content.split(/(\\r\\n|\\n\\r|\\n){2,}/gm);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i].trim();\n    if (!group.length) {\n      continue;\n    }\n    const rows = group\n      .split(/\\n/gm)\n      .map((row) =>\n        row.split(/\",/g).map((cell) => cell.trim().replace(/^(\")|(\")$/g, \"\"))\n      );\n    blocks.push(rows);\n  }\n  return blocks;\n}\n","/**\n * AGS4.x importer\n *\n * @version 4.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */\n\nimport type { AGSGroup, AGSColumn } from \"./types\";\nimport { block, testDigit, testIsoDate, nround } from \"./utils\";\n\nexport default function (content?: string | null): AGSGroup[] {\n  const groups: AGSGroup[] = [];\n  const blocks = block(content);\n\n  for (let i = 0; i < blocks.length; i++) {\n    let heading = \"\";\n    const block = blocks[i];\n    const headers: AGSColumn[] = [];\n    const data: (string | number | null)[][] = [];\n    for (let j = 0; j < block.length; j++) {\n      const row = block[j];\n      if (row.length < 2) {\n        continue;\n      }\n\n      const firstCell = row[0] ?? \"\";\n      if (firstCell === \"GROUP\") {\n        heading = (row[1] ?? \"\").trim();\n      } else if (firstCell === \"HEADING\") {\n        for (let k = 1; k < row.length; k++) {\n          const cell = row[k];\n          headers.push({\n            name: cell.length ? cell.trim() : \"undefined\",\n            unit: \"\",\n            type: \"\"\n          });\n        }\n      } else if (firstCell === \"UNIT\") {\n        for (let k = 1; k < row.length; k++) {\n          const cell = row[k];\n          if (k - 1 < headers.length) {\n            headers[k - 1].unit = cell.length ? cell.trim() : \"\";\n          }\n        }\n      } else if (firstCell === \"TYPE\") {\n        for (let k = 1; k < row.length; k++) {\n          const cell = row[k];\n          if (k - 1 < headers.length) {\n            headers[k - 1].type = cell.length ? cell.trim() : \"\";\n          }\n        }\n      } else if (firstCell === \"DATA\") {\n        const cells = [];\n        for (let k = 1; k < row.length; k++) {\n          const cell = row[k];\n          const value = cell.length ? cell.trim() : \"\";\n          const header =\n            k - 1 < headers.length ? headers[k - 1] : { name: \"undefined\" };\n          const type = header.type ?? \"\";\n          if (type === \"DT\") {\n            cells.push(testIsoDate(value) ? value : null);\n          } else if (type === \"DMS\") {\n            cells.push(value.length ? value : null);\n          } else if (type.indexOf(\"DP\") > -1 || type.indexOf(\"SP\") > 1) {\n            // const dp = Number.parseInt(type.replace(/\\D+/g, ''))\n            cells.push(\n              value.length ? nround(Number.parseFloat(value), 5) : null\n            );\n          } else if (type === \"X\" || type === \"ID\") {\n            cells.push(value.length ? value : null);\n          } else {\n            if (testDigit(value)) {\n              cells.push(\n                value.length ? nround(Number.parseFloat(value), 5) : null\n              );\n            } else {\n              cells.push(value.length ? value : null);\n            }\n          }\n        }\n\n        if (headers.length < cells.length) {\n          while (headers.length < cells.length) {\n            headers.push({\n              name: `${heading}_${headers.length}`,\n              unit: \"\",\n              type: \"\"\n            });\n          }\n        }\n        if (cells.length < headers.length) {\n          while (cells.length < headers.length) {\n            cells.push(null);\n          }\n        }\n\n        data.push(cells);\n      }\n    }\n    if (heading.length) {\n      groups.push({\n        heading: heading,\n        columns: headers,\n        rows: data\n      });\n    }\n  }\n\n  return groups;\n}\n"],"names":["$fc7df41ca676b6cd$export$5d452d25893c9ae2","value","test","$fc7df41ca676b6cd$export$5e4751563059a4b6","decimal","r","Math","pow","v","isNaN","isFinite","round","$fc7df41ca676b6cd$export$837bd02682cd3db9","content","blocks","groups","split","i","length","group","trim","rows","map","row","cell","replace","push","$23ccb22ac3ecb2a2$export$c506eb22e615ba4a","indexOf","$23ccb22ac3ecb2a2$export$98e6a39c04603d36","version","heading","block","headers","data","j","firstCell","charAt","k","name","unit","type","cont","cells","header","parts","parseFloat","prev","columns","Number","$23ccb22ac3ecb2a2$export$71aa6c912b956294","findIndex","$23ccb22ac3ecb2a2$export$871de8747c9eaa88","keys","values","forEach","key","column","format","default","getVersion","parse","find"],"version":3,"file":"module.js.map"}